(*===============================================================================*)
(*                                                                               *)
(*                rmem executable model                                          *)
(*                =====================                                          *)
(*                                                                               *)
(*  This file is:                                                                *)
(*                                                                               *)
(*  Copyright Christopher Pulte, University of Cambridge    2016-2018            *)
(*  Copyright Shaked Flur, University of Cambridge               2017            *)
(*  Copyright Robert Norton-Wright, University of Cambridge      2017            *)
(*  Copyright Jon French, University of Cambridge                2018            *)
(*                                                                               *)
(*  All rights reserved.                                                         *)
(*                                                                               *)
(*  It is part of the rmem tool, distributed under the 2-clause BSD licence in   *)
(*  LICENCE.txt.                                                                 *)
(*                                                                               *)
(*===============================================================================*)

(* emacs fontification -*-caml-*- *)

(** The Whole System Sequential Behaviour *)

open import Pervasives_extra

open import Sail_impl_base
open import MachineDefDebug
open import MachineDefUtils
open import MachineDefFreshIds
open import MachineDefTypes

open import Sail_values
open import State

import MachineDefSystem

import Power_embed_sequential
import ArmV8_embed_sequential
import Mips_embed_sequential
import Riscv_sequential
import X86_embed_sequential

let fetch endianness program_memory address =
  MachineDefSystem.elf_program_memory_opcode_lookup program_memory endianness address

let decode isa_info address opcode =

  let default_direction = match isa_info.ism with
    | PPCGEN_ism -> true
    | AARCH64_ism AArch64HandSail -> false
    | AARCH64_ism AArch64GenSail -> false
    | MIPS_ism -> false
    | RISCV_ism -> false
    | X86_ism -> false
  end in

  let (Opcode bytes) = opcode in
  let opcode_bitv = bitv_of_bytes default_direction bytes in
  
  match isa_info.ism with
  | PPCGEN_ism ->
     match Power_embed_sequential.decode opcode_bitv with
     | Nothing -> Right (Not_an_instruction_error opcode)
     | Just instr ->
        match Power_embed_sequential.supported_instructions instr with
        | Nothing -> Right (Unsupported_instruction_error opcode (PPCGEN_instr instr))
        | Just _ -> Left (PPCGEN_instr instr)
        end
     end
   | AARCH64_ism AArch64HandSail -> 
      let dummy_state = <| memstate = Map.empty; 
                           regstate = Map.empty; 
                           tagstate = Map.empty;
                           write_ea = Nothing;
                           last_exclusive_operation_was_load = false|> in
      match ArmV8_embed_sequential.decode opcode_bitv dummy_state with
      | [(Left Nothing,_)] -> Right (Not_an_instruction_error opcode)
      | [(Left (Just instr), _)] -> Left (AArch64_instr instr)
      | [(Right _,_)] -> failwith ("armV8 decode failed with: Error")
      | _ -> failwith "armV8 decode produced multiple results"
      end
   | AARCH64_ism AArch64GenSail ->
      failwith "AArch64Gen ISA not supported by shallow embedding"
   | MIPS_ism ->
      match Mips_embed_sequential.decode opcode_bitv with
      | Nothing -> Right (Not_an_instruction_error opcode)
      | Just instr -> Left (MIPS_instr instr)
      end
   | RISCV_ism ->
      failwith "Riscv_embed_sequential decode not implemented"
      (* match Riscv_sequential.decode (MachineDefInstructionSemantics.sail_bv_1to2 opcode_bitv) with
       * | Nothing -> Right (Not_an_instruction_error opcode)
       * | Just instr -> Left (RISCV_instr instr)
       * end *)
   | X86_ism ->
      failwith "X86_embed_sequential decode not implemented"
   end

let take_snapshot isa_info instruction = 
  isa_info.is_test_begin_instruction instruction ||
    isa_info.is_test_end_instruction instruction


let execute instr = match instr with
  | PPCGEN_instr instr -> Power_embed_sequential.execute instr
  | AArch64_instr instr -> ArmV8_embed_sequential.execute instr
  | MIPS_instr instr -> Mips_embed_sequential.execute instr
  | RISCV_instr instr -> failwith "riscv sequential not implemented" (* Riscv_sequential.execute instr *)
  | X86_instr instr -> X86_embed_sequential.execute instr
  | Fetch_error -> failwith "execute Fetch_error"
end

let maybe_increment_nia isa_info state state' =
  let nia_reg = register_base_name (isa_info.nia_reg) in
  let nia = get_reg state nia_reg in
  let nia' = get_reg state' nia_reg in
  if nia <> nia'
  then
    (state', address_of_bitv nia')
  else
    let new_nia = add_VIV nia 4 in
    (set_reg state' nia_reg new_nia, address_of_bitv new_nia)

let set_cia_to_address isa_info address state =
  let cia_start = integerFromNat (start_of_reg_name isa_info.cia_reg) in
  let cia_dir = bool_of_dir (direction_of_reg_name isa_info.cia_reg) in
  let cia_val = match address with
    | Address bytes _ -> set_vector_start cia_start (bitv_of_bytes cia_dir bytes) end in
  set_reg state (register_base_name isa_info.cia_reg) cia_val

let set_nia_to_address isa_info address state =
  let nia_start = integerFromNat (start_of_reg_name isa_info.nia_reg) in
  let nia_dir = bool_of_dir (direction_of_reg_name isa_info.nia_reg) in
  let nia_val = match address with
    | Address bytes _ -> set_vector_start nia_start (bitv_of_bytes nia_dir bytes) end in
  set_reg state (register_base_name isa_info.nia_reg) nia_val



(* convert the address-to-word8 map memory into an "address -> maybe opcode" function *)
let elf_program_memory_opcode_lookup (mem: map address byte) (big_endian: bool) (a0: address) : maybe opcode =
  let a1 = add_address_nat a0 1 in
  let a2 = add_address_nat a0 2 in
  let a3 = add_address_nat a0 3 in
  let byte0 : maybe byte = Map.lookup a0 mem in
  let byte1 : maybe byte = Map.lookup a1 mem in
  let byte2 : maybe byte = Map.lookup a2 mem in
  let byte3 : maybe byte = Map.lookup a3 mem in
  match (byte0,byte1,byte2,byte3) with
  | (Just b0, Just b1, Just b2, Just b3) ->
      if big_endian then Just (opcode_of_bytes b0 b1 b2 b3)
      else Just (opcode_of_bytes b3 b2 b1 b0)
  | (_,_,_,_) -> Nothing  
  end 
                                                         
type result =
  | Fetch_error of address
  | Decode_error of address * decode_error_t
  | Exception of string * sequential_state
  | Next_state of instruction_ast * sequential_state * address * bool  (* for whether snapshot *)
  | Final_state of sequential_state


let run_address isa_info endianness return_address program_memory address state =
  let state = set_cia_to_address isa_info address state in
  if address = return_address then [Final_state state] else
    match fetch endianness program_memory address with
    | Nothing -> [Fetch_error address]
    | Just opcode ->
       match decode isa_info address opcode with
       | Right err -> [Decode_error address err]
       | Left (instr : instruction_ast) ->
          let results = execute instr state in
          List.map
            (function
             | (Right err,state') -> Exception "error" state
             | (Left (),state') ->
                let (state',address') = maybe_increment_nia isa_info state state' in
                let take_snapshot = take_snapshot isa_info instr in
                let address' =
                  (* this is so we do another step and take the snapshot, only then finish *)
                  if isa_info.is_test_end_instruction instr
                  then return_address 
                  else address' in
                Next_state instr state' address' take_snapshot
             end)
            results
       end
    end

type initial_system_setup_sequential =
  <| run_address :  address -> sequential_state -> list result;
     initial_state : sequential_state;
     initial_address : address;
     register_data : registerdata;
     program_memory : map address byte |>
     
  
let elf_prog_initial_system_setup_sequential
      (isa_info : isa_info)
      (endianness: end_flag)
      (initial_register_state: regstate) 
      (initial_memory_state: memstate) 
      (initial_tag_state: tagstate) 
      (return_address: address)
      (initial_address: address)
      (program_memory: map address byte)
    : initial_system_setup_sequential =
  let run_address =
    run_address isa_info endianness return_address program_memory in
  let initial_state =
    <| memstate = initial_memory_state;
       regstate = initial_register_state; 
       tagstate = initial_tag_state;
       write_ea = Nothing;
       last_exclusive_operation_was_load = false |> in

  let initial_state = set_cia_to_address isa_info initial_address initial_state in
  let initial_state = set_nia_to_address isa_info initial_address initial_state in

  <| run_address = run_address;
     initial_state = initial_state;
     initial_address = initial_address;
     register_data = isa_info.register_data_info;
     program_memory = program_memory; |>
    
let register_snapshot_of_state isa_info state : register_snapshot =
  let regstate = state.regstate in
  List.map (fun (rbn, (dir, width, start_index, _)) ->
      let r = Reg rbn start_index width dir in
      let maybe_bitv = Map.lookup rbn regstate in
      let maybe_regval = Maybe.map (external_reg_value r) maybe_bitv in
      (rbn,maybe_regval))
    isa_info.register_data_info

let memory_snapshot_of_state isa_info state : memory_snapshot =
  let memstate = Map_extra.toList state.memstate in
  let memstate' = [((address_of_integer a,1),[mv]) 
                       | forall ((a,mv) MEM memstate) 
                       | MachineDefSystem.memory_snapshot_filter isa_info.ism a ] in
  MachineDefSystem.normalise_memory_snapshot memstate'


let snapshot_of_state fake_ioid isa_info state =
  let regsnapshot = register_snapshot_of_state isa_info state in
  let memsnapshot = memory_snapshot_of_state isa_info state in
  (fake_ioid,regsnapshot,memsnapshot)
