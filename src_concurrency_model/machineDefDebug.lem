(*===============================================================================*)
(*                                                                               *)
(*                rmem executable model                                          *)
(*                =====================                                          *)
(*                                                                               *)
(*  This file is:                                                                *)
(*                                                                               *)
(*  Copyright Peter Sewell, University of Cambridge       2014-2015              *)
(*  Copyright Shaked Flur, University of Cambridge       2015, 2017              *)
(*  Copyright Christopher Pulte, University of Cambridge       2015              *)
(*                                                                               *)
(*  All rights reserved.                                                         *)
(*                                                                               *)
(*  The rmem tool is distributed under the 2-clause BSD license in LICENCE.txt.  *)
(*  For author information see README.md.                                        *)
(*                                                                               *)
(*===============================================================================*)

open import Pervasives

val nothing1 : forall 'a. 'a -> unit
let nothing1 _ = ()

val nothing2 : forall 'a 'b. 'a -> 'b -> unit
let nothing2 _ _ = ()

val timer_start : string -> unit
declare ocaml    target_rep function timer_start = `Debug.timer_start`
declare isabelle target_rep function timer_start = `nothing1`

val timer_stop : string -> unit
declare ocaml    target_rep function timer_stop = `Debug.timer_stop`
declare isabelle target_rep function timer_stop = `nothing1`
						    
val print_time : int -> int -> unit
declare ocaml    target_rep function print_time = `Debug.print_time`
declare isabelle target_rep function print_time = `nothing2`

val print_acc_time : int -> unit
declare ocaml    target_rep function print_acc_time = `Debug.print_acc_time`
declare isabelle target_rep function print_acc_time = `nothing1`

val print_endline : string -> unit
declare ocaml    target_rep function print_endline = `print_endline`
declare isabelle target_rep function print_endline = `nothing1`

(* NOTE: ocaml's print_string does not flush standard output. This can
produce confusing results, specially if the program crash. Consider 
using print_endline which does flush standard output. *)
val print_string : string -> unit
declare ocaml    target_rep function print_string = `Debug.print_string`
declare isabelle target_rep function print_string = `nothing1`
										    
val print_integer : integer -> unit
declare ocaml    target_rep function print_integer = `Debug.print_integer`
declare isabelle target_rep function print_integer = `nothing1`

val set_writes_seen : integer -> unit
declare ocaml    target_rep function set_writes_seen = `Debug.set_writes_seen`
declare isabelle target_rep function set_writes_seen = `nothing1`
