(*===============================================================================*)
(*                                                                               *)
(*                rmem executable model                                          *)
(*                =====================                                          *)
(*                                                                               *)
(*  This file is:                                                                *)
(*                                                                               *)
(*  Copyright Jon French, University of Cambridge 2018                           *)
(*                                                                               *)
(*  All rights reserved.                                                         *)
(*                                                                               *)
(*  It is part of the rmem tool, distributed under the 2-clause BSD licence in   *)
(*  LICENCE.txt.                                                                 *)
(*                                                                               *)
(*===============================================================================*)

(*Generated by Sail from riscv.*)
open import Pervasives_extra
open import Sail2_instr_kinds
open import Sail2_values
open import Sail2_string
open import Sail2_operators_mwords
open import Sail2_prompt_monad
open import Sail2_prompt
type bits 'n = mword 'n



type xlenbits  = bits ty64

type half  = bits ty16

type word  = bits ty32

type regno 'n  = integer

type regbits  = bits ty5

type cregbits  = bits ty3

type csreg  = bits ty12

type opcode  = bits ty7

type imm12  = bits ty12

type imm20  = bits ty20

type amo  = bits ty1

type Architecture = RV32 | RV64 | RV128



type arch_xlen  = bits ty2

type priv_level  = bits ty2

type Privilege = User | Supervisor | Machine



type AccessType = Read | Write | ReadWrite | Execute



type ReadType = Instruction | Data



type exc_code  = bits ty4

type ExceptionType =
  E_Fetch_Addr_Align
  | E_Fetch_Access_Fault
  | E_Illegal_Instr
  | E_Breakpoint
  | E_Load_Addr_Align
  | E_Load_Access_Fault
  | E_SAMO_Addr_Align
  | E_SAMO_Access_Fault
  | E_U_EnvCall
  | E_S_EnvCall
  | E_Reserved_10
  | E_M_EnvCall
  | E_Fetch_Page_Fault
  | E_Load_Page_Fault
  | E_Reserved_14
  | E_SAMO_Page_Fault



type InterruptType =
  I_U_Software
  | I_S_Software
  | I_M_Software
  | I_U_Timer
  | I_S_Timer
  | I_M_Timer
  | I_U_External
  | I_S_External
  | I_M_External



type tv_mode  = bits ty2

type TrapVectorMode = TV_Direct | TV_Vector | TV_Reserved



type exception  = | Error_not_implemented of (string) | Error_internal_error of (unit)



type ext_status  = bits ty2

type ExtStatus = Off | Initial | Clean | Dirty



type satp_mode  = bits ty4

type SATPMode = Sbare | Sv32 | Sv39



type csrRW  = bits ty2

type uop = RISCV_LUI | RISCV_AUIPC



type bop = RISCV_BEQ | RISCV_BNE | RISCV_BLT | RISCV_BGE | RISCV_BLTU | RISCV_BGEU



type iop = RISCV_ADDI | RISCV_SLTI | RISCV_SLTIU | RISCV_XORI | RISCV_ORI | RISCV_ANDI



type sop = RISCV_SLLI | RISCV_SRLI | RISCV_SRAI



type rop =
  RISCV_ADD
  | RISCV_SUB
  | RISCV_SLL
  | RISCV_SLT
  | RISCV_SLTU
  | RISCV_XOR
  | RISCV_SRL
  | RISCV_SRA
  | RISCV_OR
  | RISCV_AND



type ropw = RISCV_ADDW | RISCV_SUBW | RISCV_SLLW | RISCV_SRLW | RISCV_SRAW



type amoop = AMOSWAP | AMOADD | AMOXOR | AMOAND | AMOOR | AMOMIN | AMOMAX | AMOMINU | AMOMAXU



type csrop = CSRRW | CSRRS | CSRRC



type word_width = BYTE | HALF | WORD | DOUBLE



type Misa  = <| Misa_Misa_chunk_0 : mword ty64; |>


type SV39_PTE  = <| SV39_PTE_SV39_PTE_chunk_0 : mword ty64; |>


type PTE_Bits  = <| PTE_Bits_PTE_Bits_chunk_0 : mword ty8; |>


type Mstatus  = <| Mstatus_Mstatus_chunk_0 : mword ty64; |>


type Sstatus  = <| Sstatus_Sstatus_chunk_0 : mword ty64; |>


type Minterrupts  = <| Minterrupts_Minterrupts_chunk_0 : mword ty64; |>


type Sinterrupts  = <| Sinterrupts_Sinterrupts_chunk_0 : mword ty64; |>


type Medeleg  = <| Medeleg_Medeleg_chunk_0 : mword ty64; |>


type Sedeleg  = <| Sedeleg_Sedeleg_chunk_0 : mword ty64; |>


type Mtvec  = <| Mtvec_Mtvec_chunk_0 : mword ty64; |>


type Satp64  = <| Satp64_Satp64_chunk_0 : mword ty64; |>


type Mcause  = <| Mcause_Mcause_chunk_0 : mword ty64; |>


type Counteren  = <| Counteren_Counteren_chunk_0 : mword ty32; |>


type sync_exception  =
  <| sync_exception_trap : ExceptionType; sync_exception_excinfo : maybe xlenbits; |>


type ctl_result  = | CTL_TRAP of (sync_exception) | CTL_SRET of (unit) | CTL_MRET of (unit)



type MemoryOpResult 'a = | MemValue of ('a) | MemException of (ExceptionType)



type htif_cmd  = <| htif_cmd_htif_cmd_chunk_0 : mword ty64; |>


type pteAttribs  = bits ty8

type PTW_Error = PTW_Access | PTW_Invalid_PTE | PTW_No_Permission | PTW_Misaligned | PTW_PTE_Update



type vaddr39  = bits ty39

type paddr39  = bits ty56

type pte39  = xlenbits

type SV39_Vaddr  = <| SV39_Vaddr_SV39_Vaddr_chunk_0 : mword ty39; |>


type SV39_Paddr  = <| SV39_Paddr_SV39_Paddr_chunk_0 : mword ty56; |>


type asid64  = bits ty16

type PTW_Result  =
  | PTW_Success of ((paddr39 * SV39_PTE * paddr39 * ii * bool)) | PTW_Failure of (PTW_Error)



type TLB39_Entry  =
  <| TLB39_Entry_asid : asid64;
     TLB39_Entry_global : bool;
     TLB39_Entry_vAddr : vaddr39;
     TLB39_Entry_pAddr : paddr39;
     TLB39_Entry_vMatchMask : vaddr39;
     TLB39_Entry_vAddrMask : vaddr39;
     TLB39_Entry_pte : SV39_PTE;
     TLB39_Entry_pteAddr : paddr39;
     TLB39_Entry_age : xlenbits; |>


type TR39_Result  = | TR39_Address of (paddr39) | TR39_Failure of (PTW_Error)



type TR_Result  = | TR_Address of (xlenbits) | TR_Failure of (ExceptionType)



type ast  =
  | UTYPE of ((bits ty20 * regbits * uop))
  | RISCV_JAL of ((bits ty21 * regbits))
  | RISCV_JALR of ((bits ty12 * regbits * regbits))
  | BTYPE of ((bits ty13 * regbits * regbits * bop))
  | ITYPE of ((bits ty12 * regbits * regbits * iop))
  | SHIFTIOP of ((bits ty6 * regbits * regbits * sop))
  | RTYPE of ((regbits * regbits * regbits * rop))
  | LOAD of ((bits ty12 * regbits * regbits * bool * word_width * bool * bool))
  | STORE of ((bits ty12 * regbits * regbits * word_width * bool * bool))
  | ADDIW of ((bits ty12 * regbits * regbits))
  | SHIFTW of ((bits ty5 * regbits * regbits * sop))
  | RTYPEW of ((regbits * regbits * regbits * ropw))
  | MUL of ((regbits * regbits * regbits * bool * bool * bool))
  | DIV of ((regbits * regbits * regbits * bool))
  | REM of ((regbits * regbits * regbits * bool))
  | MULW of ((regbits * regbits * regbits))
  | DIVW of ((regbits * regbits * regbits * bool))
  | REMW of ((regbits * regbits * regbits * bool))
  | FENCE of ((bits ty4 * bits ty4))
  | FENCEI of (unit)
  | ECALL of (unit)
  | MRET of (unit)
  | SRET of (unit)
  | EBREAK of (unit)
  | WFI of (unit)
  | SFENCE_VMA of ((regbits * regbits))
  | LOADRES of ((bool * bool * regbits * word_width * regbits))
  | STORECON of ((bool * bool * regbits * regbits * word_width * regbits))
  | AMO of ((amoop * bool * bool * regbits * regbits * word_width * regbits))
  | CSR of ((bits ty12 * regbits * regbits * bool * csrop))
  | NOP of (unit)
  | C_ADDI4SPN of ((cregbits * bits ty8))
  | C_LW of ((bits ty5 * cregbits * cregbits))
  | C_LD of ((bits ty5 * cregbits * cregbits))
  | C_SW of ((bits ty5 * cregbits * cregbits))
  | C_SD of ((bits ty5 * cregbits * cregbits))
  | C_ADDI of ((bits ty6 * regbits))
  | C_JAL of (bits ty11)
  | C_ADDIW of ((bits ty6 * regbits))
  | C_LI of ((bits ty6 * regbits))
  | C_ADDI16SP of (bits ty6)
  | C_LUI of ((bits ty6 * regbits))
  | C_SRLI of ((bits ty6 * cregbits))
  | C_SRAI of ((bits ty6 * cregbits))
  | C_ANDI of ((bits ty6 * cregbits))
  | C_SUB of ((cregbits * cregbits))
  | C_XOR of ((cregbits * cregbits))
  | C_OR of ((cregbits * cregbits))
  | C_AND of ((cregbits * cregbits))
  | C_SUBW of ((cregbits * cregbits))
  | C_ADDW of ((cregbits * cregbits))
  | C_J of (bits ty11)
  | C_BEQZ of ((bits ty8 * cregbits))
  | C_BNEZ of ((bits ty8 * cregbits))
  | C_SLLI of ((bits ty6 * regbits))
  | C_LWSP of ((bits ty6 * regbits))
  | C_LDSP of ((bits ty6 * regbits))
  | C_SWSP of ((bits ty6 * regbits))
  | C_SDSP of ((bits ty6 * regbits))
  | C_JR of (regbits)
  | C_JALR of (regbits)
  | C_MV of ((regbits * regbits))
  | C_ADD of ((regbits * regbits))
  | STOP_FETCHING of (unit)
  | THREAD_START of (unit)
  | ILLEGAL of (word)
  | C_ILLEGAL of (unit)



type FetchResult  = | F_Base of (word) | F_RVC of (half) | F_Error of ((ExceptionType * xlenbits))



type regfp  =
  | RFull of (string)
  | RSlice of ((string * ii * ii))
  | RSliceBit of ((string * ii))
  | RField of ((string * string))



type regfps  = list regfp

type niafp  =
  | NIAFP_successor of (unit)
  | NIAFP_concrete_address of (bits ty64)
  | NIAFP_indirect_address of (unit)



type niafps  = list niafp

type diafp  = | DIAFP_none of (unit) | DIAFP_concrete of (bits ty64) | DIAFP_reg of (regfp)













type register_value  =
  | Regval_vector of ((ii * bool * list register_value))
  | Regval_list of (list register_value)
  | Regval_option of (maybe register_value)
  | Regval_Counteren of (Counteren)
  | Regval_Mcause of (Mcause)
  | Regval_Medeleg of (Medeleg)
  | Regval_Minterrupts of (Minterrupts)
  | Regval_Misa of (Misa)
  | Regval_Mstatus of (Mstatus)
  | Regval_Mtvec of (Mtvec)
  | Regval_Privilege of (Privilege)
  | Regval_Sedeleg of (Sedeleg)
  | Regval_Sinterrupts of (Sinterrupts)
  | Regval_TLB39_Entry of (TLB39_Entry)
  | Regval_bool of (bool)
  | Regval_vector_64_dec_bit of (mword ty64)



type regstate  =
  <| tlb39 : maybe TLB39_Entry;
     htif_exit_code : mword ty64;
     htif_done : bool;
     htif_tohost : mword ty64;
     mtimecmp : mword ty64;
     tselect : mword ty64;
     stval : mword ty64;
     scause : Mcause;
     sepc : mword ty64;
     sscratch : mword ty64;
     stvec : Mtvec;
     satp : mword ty64;
     sideleg : Sinterrupts;
     sedeleg : Sedeleg;
     pmpcfg0 : mword ty64;
     pmpaddr0 : mword ty64;
     mhartid : mword ty64;
     marchid : mword ty64;
     mimpid : mword ty64;
     mvendorid : mword ty64;
     minstret_written : bool;
     minstret : mword ty64;
     mtime : mword ty64;
     mcycle : mword ty64;
     scounteren : Counteren;
     mcounteren : Counteren;
     mscratch : mword ty64;
     mtval : mword ty64;
     mepc : mword ty64;
     mcause : Mcause;
     mtvec : Mtvec;
     medeleg : Medeleg;
     mideleg : Minterrupts;
     mie : Minterrupts;
     mip : Minterrupts;
     mstatus : Mstatus;
     misa : Misa;
     cur_inst : mword ty64;
     cur_privilege : Privilege;
     x31 : mword ty64;
     x30 : mword ty64;
     x29 : mword ty64;
     x28 : mword ty64;
     x27 : mword ty64;
     x26 : mword ty64;
     x25 : mword ty64;
     x24 : mword ty64;
     x23 : mword ty64;
     x22 : mword ty64;
     x21 : mword ty64;
     x20 : mword ty64;
     x19 : mword ty64;
     x18 : mword ty64;
     x17 : mword ty64;
     x16 : mword ty64;
     x15 : mword ty64;
     x14 : mword ty64;
     x13 : mword ty64;
     x12 : mword ty64;
     x11 : mword ty64;
     x10 : mword ty64;
     x9 : mword ty64;
     x8 : mword ty64;
     x7 : mword ty64;
     x6 : mword ty64;
     x5 : mword ty64;
     x4 : mword ty64;
     x3 : mword ty64;
     x2 : mword ty64;
     x1 : mword ty64;
     Xs : list (mword ty64);
     nextPC : mword ty64;
     PC : mword ty64; |>




val Counteren_of_regval : register_value -> maybe Counteren

let Counteren_of_regval merge_var =
   match merge_var with | Regval_Counteren (v) -> Just v | g__12 -> Nothing end

val regval_of_Counteren : Counteren -> register_value

let regval_of_Counteren v = Regval_Counteren v

val Mcause_of_regval : register_value -> maybe Mcause

let Mcause_of_regval merge_var =
   match merge_var with | Regval_Mcause (v) -> Just v | g__11 -> Nothing end

val regval_of_Mcause : Mcause -> register_value

let regval_of_Mcause v = Regval_Mcause v

val Medeleg_of_regval : register_value -> maybe Medeleg

let Medeleg_of_regval merge_var =
   match merge_var with | Regval_Medeleg (v) -> Just v | g__10 -> Nothing end

val regval_of_Medeleg : Medeleg -> register_value

let regval_of_Medeleg v = Regval_Medeleg v

val Minterrupts_of_regval : register_value -> maybe Minterrupts

let Minterrupts_of_regval merge_var =
   match merge_var with | Regval_Minterrupts (v) -> Just v | g__9 -> Nothing end

val regval_of_Minterrupts : Minterrupts -> register_value

let regval_of_Minterrupts v = Regval_Minterrupts v

val Misa_of_regval : register_value -> maybe Misa

let Misa_of_regval merge_var =
   match merge_var with | Regval_Misa (v) -> Just v | g__8 -> Nothing end

val regval_of_Misa : Misa -> register_value

let regval_of_Misa v = Regval_Misa v

val Mstatus_of_regval : register_value -> maybe Mstatus

let Mstatus_of_regval merge_var =
   match merge_var with | Regval_Mstatus (v) -> Just v | g__7 -> Nothing end

val regval_of_Mstatus : Mstatus -> register_value

let regval_of_Mstatus v = Regval_Mstatus v

val Mtvec_of_regval : register_value -> maybe Mtvec

let Mtvec_of_regval merge_var =
   match merge_var with | Regval_Mtvec (v) -> Just v | g__6 -> Nothing end

val regval_of_Mtvec : Mtvec -> register_value

let regval_of_Mtvec v = Regval_Mtvec v

val Privilege_of_regval : register_value -> maybe Privilege

let Privilege_of_regval merge_var =
   match merge_var with | Regval_Privilege (v) -> Just v | g__5 -> Nothing end

val regval_of_Privilege : Privilege -> register_value

let regval_of_Privilege v = Regval_Privilege v

val Sedeleg_of_regval : register_value -> maybe Sedeleg

let Sedeleg_of_regval merge_var =
   match merge_var with | Regval_Sedeleg (v) -> Just v | g__4 -> Nothing end

val regval_of_Sedeleg : Sedeleg -> register_value

let regval_of_Sedeleg v = Regval_Sedeleg v

val Sinterrupts_of_regval : register_value -> maybe Sinterrupts

let Sinterrupts_of_regval merge_var =
   match merge_var with | Regval_Sinterrupts (v) -> Just v | g__3 -> Nothing end

val regval_of_Sinterrupts : Sinterrupts -> register_value

let regval_of_Sinterrupts v = Regval_Sinterrupts v

val TLB39_Entry_of_regval : register_value -> maybe TLB39_Entry

let TLB39_Entry_of_regval merge_var =
   match merge_var with | Regval_TLB39_Entry (v) -> Just v | g__2 -> Nothing end

val regval_of_TLB39_Entry : TLB39_Entry -> register_value

let regval_of_TLB39_Entry v = Regval_TLB39_Entry v

val bool_of_regval : register_value -> maybe bool

let bool_of_regval merge_var =
   match merge_var with | Regval_bool (v) -> Just v | g__1 -> Nothing end

val regval_of_bool : bool -> register_value

let regval_of_bool v = Regval_bool v

val vector_64_dec_bit_of_regval : register_value -> maybe (mword ty64)

let vector_64_dec_bit_of_regval merge_var =
   match merge_var with | Regval_vector_64_dec_bit (v) -> Just v | g__0 -> Nothing end

val regval_of_vector_64_dec_bit : mword ty64 -> register_value

let regval_of_vector_64_dec_bit v = Regval_vector_64_dec_bit v



val vector_of_regval : forall 'a. (register_value -> maybe 'a) -> register_value -> maybe (list 'a)
let vector_of_regval of_regval = function
  | Regval_vector (_, _, v) -> just_list (List.map of_regval v)
  | _ -> Nothing
end

val regval_of_vector : forall 'a. ('a -> register_value) -> integer -> bool -> list 'a -> register_value
let regval_of_vector regval_of size is_inc xs = Regval_vector (size, is_inc, List.map regval_of xs)

val list_of_regval : forall 'a. (register_value -> maybe 'a) -> register_value -> maybe (list 'a)
let list_of_regval of_regval = function
  | Regval_list v -> just_list (List.map of_regval v)
  | _ -> Nothing
end

val regval_of_list : forall 'a. ('a -> register_value) -> list 'a -> register_value
let regval_of_list regval_of xs = Regval_list (List.map regval_of xs)

val option_of_regval : forall 'a. (register_value -> maybe 'a) -> register_value -> maybe (maybe 'a)
let option_of_regval of_regval = function
  | Regval_option v -> Just (Maybe.bind v of_regval)
  | _ -> Nothing
end

val regval_of_option : forall 'a. ('a -> register_value) -> maybe 'a -> register_value
let regval_of_option regval_of v = Regval_option (Maybe.map regval_of v)


let tlb39_ref = <|
  name = "tlb39";
  read_from = (fun s -> s.tlb39);
  write_to = (fun v s -> (<| s with tlb39 = v |>));
  of_regval = (fun v -> option_of_regval (fun v -> TLB39_Entry_of_regval v) v);
  regval_of = (fun v -> regval_of_option (fun v -> regval_of_TLB39_Entry v) v) |>

let htif_exit_code_ref = <|
  name = "htif_exit_code";
  read_from = (fun s -> s.htif_exit_code);
  write_to = (fun v s -> (<| s with htif_exit_code = v |>));
  of_regval = (fun v -> vector_64_dec_bit_of_regval v);
  regval_of = (fun v -> regval_of_vector_64_dec_bit v) |>

let htif_done_ref = <|
  name = "htif_done";
  read_from = (fun s -> s.htif_done);
  write_to = (fun v s -> (<| s with htif_done = v |>));
  of_regval = (fun v -> bool_of_regval v);
  regval_of = (fun v -> regval_of_bool v) |>

let htif_tohost_ref = <|
  name = "htif_tohost";
  read_from = (fun s -> s.htif_tohost);
  write_to = (fun v s -> (<| s with htif_tohost = v |>));
  of_regval = (fun v -> vector_64_dec_bit_of_regval v);
  regval_of = (fun v -> regval_of_vector_64_dec_bit v) |>

let mtimecmp_ref = <|
  name = "mtimecmp";
  read_from = (fun s -> s.mtimecmp);
  write_to = (fun v s -> (<| s with mtimecmp = v |>));
  of_regval = (fun v -> vector_64_dec_bit_of_regval v);
  regval_of = (fun v -> regval_of_vector_64_dec_bit v) |>

let tselect_ref = <|
  name = "tselect";
  read_from = (fun s -> s.tselect);
  write_to = (fun v s -> (<| s with tselect = v |>));
  of_regval = (fun v -> vector_64_dec_bit_of_regval v);
  regval_of = (fun v -> regval_of_vector_64_dec_bit v) |>

let stval_ref = <|
  name = "stval";
  read_from = (fun s -> s.stval);
  write_to = (fun v s -> (<| s with stval = v |>));
  of_regval = (fun v -> vector_64_dec_bit_of_regval v);
  regval_of = (fun v -> regval_of_vector_64_dec_bit v) |>

let scause_ref = <|
  name = "scause";
  read_from = (fun s -> s.scause);
  write_to = (fun v s -> (<| s with scause = v |>));
  of_regval = (fun v -> Mcause_of_regval v);
  regval_of = (fun v -> regval_of_Mcause v) |>

let sepc_ref = <|
  name = "sepc";
  read_from = (fun s -> s.sepc);
  write_to = (fun v s -> (<| s with sepc = v |>));
  of_regval = (fun v -> vector_64_dec_bit_of_regval v);
  regval_of = (fun v -> regval_of_vector_64_dec_bit v) |>

let sscratch_ref = <|
  name = "sscratch";
  read_from = (fun s -> s.sscratch);
  write_to = (fun v s -> (<| s with sscratch = v |>));
  of_regval = (fun v -> vector_64_dec_bit_of_regval v);
  regval_of = (fun v -> regval_of_vector_64_dec_bit v) |>

let stvec_ref = <|
  name = "stvec";
  read_from = (fun s -> s.stvec);
  write_to = (fun v s -> (<| s with stvec = v |>));
  of_regval = (fun v -> Mtvec_of_regval v);
  regval_of = (fun v -> regval_of_Mtvec v) |>

let satp_ref = <|
  name = "satp";
  read_from = (fun s -> s.satp);
  write_to = (fun v s -> (<| s with satp = v |>));
  of_regval = (fun v -> vector_64_dec_bit_of_regval v);
  regval_of = (fun v -> regval_of_vector_64_dec_bit v) |>

let sideleg_ref = <|
  name = "sideleg";
  read_from = (fun s -> s.sideleg);
  write_to = (fun v s -> (<| s with sideleg = v |>));
  of_regval = (fun v -> Sinterrupts_of_regval v);
  regval_of = (fun v -> regval_of_Sinterrupts v) |>

let sedeleg_ref = <|
  name = "sedeleg";
  read_from = (fun s -> s.sedeleg);
  write_to = (fun v s -> (<| s with sedeleg = v |>));
  of_regval = (fun v -> Sedeleg_of_regval v);
  regval_of = (fun v -> regval_of_Sedeleg v) |>

let pmpcfg0_ref = <|
  name = "pmpcfg0";
  read_from = (fun s -> s.pmpcfg0);
  write_to = (fun v s -> (<| s with pmpcfg0 = v |>));
  of_regval = (fun v -> vector_64_dec_bit_of_regval v);
  regval_of = (fun v -> regval_of_vector_64_dec_bit v) |>

let pmpaddr0_ref = <|
  name = "pmpaddr0";
  read_from = (fun s -> s.pmpaddr0);
  write_to = (fun v s -> (<| s with pmpaddr0 = v |>));
  of_regval = (fun v -> vector_64_dec_bit_of_regval v);
  regval_of = (fun v -> regval_of_vector_64_dec_bit v) |>

let mhartid_ref = <|
  name = "mhartid";
  read_from = (fun s -> s.mhartid);
  write_to = (fun v s -> (<| s with mhartid = v |>));
  of_regval = (fun v -> vector_64_dec_bit_of_regval v);
  regval_of = (fun v -> regval_of_vector_64_dec_bit v) |>

let marchid_ref = <|
  name = "marchid";
  read_from = (fun s -> s.marchid);
  write_to = (fun v s -> (<| s with marchid = v |>));
  of_regval = (fun v -> vector_64_dec_bit_of_regval v);
  regval_of = (fun v -> regval_of_vector_64_dec_bit v) |>

let mimpid_ref = <|
  name = "mimpid";
  read_from = (fun s -> s.mimpid);
  write_to = (fun v s -> (<| s with mimpid = v |>));
  of_regval = (fun v -> vector_64_dec_bit_of_regval v);
  regval_of = (fun v -> regval_of_vector_64_dec_bit v) |>

let mvendorid_ref = <|
  name = "mvendorid";
  read_from = (fun s -> s.mvendorid);
  write_to = (fun v s -> (<| s with mvendorid = v |>));
  of_regval = (fun v -> vector_64_dec_bit_of_regval v);
  regval_of = (fun v -> regval_of_vector_64_dec_bit v) |>

let minstret_written_ref = <|
  name = "minstret_written";
  read_from = (fun s -> s.minstret_written);
  write_to = (fun v s -> (<| s with minstret_written = v |>));
  of_regval = (fun v -> bool_of_regval v);
  regval_of = (fun v -> regval_of_bool v) |>

let minstret_ref = <|
  name = "minstret";
  read_from = (fun s -> s.minstret);
  write_to = (fun v s -> (<| s with minstret = v |>));
  of_regval = (fun v -> vector_64_dec_bit_of_regval v);
  regval_of = (fun v -> regval_of_vector_64_dec_bit v) |>

let mtime_ref = <|
  name = "mtime";
  read_from = (fun s -> s.mtime);
  write_to = (fun v s -> (<| s with mtime = v |>));
  of_regval = (fun v -> vector_64_dec_bit_of_regval v);
  regval_of = (fun v -> regval_of_vector_64_dec_bit v) |>

let mcycle_ref = <|
  name = "mcycle";
  read_from = (fun s -> s.mcycle);
  write_to = (fun v s -> (<| s with mcycle = v |>));
  of_regval = (fun v -> vector_64_dec_bit_of_regval v);
  regval_of = (fun v -> regval_of_vector_64_dec_bit v) |>

let scounteren_ref = <|
  name = "scounteren";
  read_from = (fun s -> s.scounteren);
  write_to = (fun v s -> (<| s with scounteren = v |>));
  of_regval = (fun v -> Counteren_of_regval v);
  regval_of = (fun v -> regval_of_Counteren v) |>

let mcounteren_ref = <|
  name = "mcounteren";
  read_from = (fun s -> s.mcounteren);
  write_to = (fun v s -> (<| s with mcounteren = v |>));
  of_regval = (fun v -> Counteren_of_regval v);
  regval_of = (fun v -> regval_of_Counteren v) |>

let mscratch_ref = <|
  name = "mscratch";
  read_from = (fun s -> s.mscratch);
  write_to = (fun v s -> (<| s with mscratch = v |>));
  of_regval = (fun v -> vector_64_dec_bit_of_regval v);
  regval_of = (fun v -> regval_of_vector_64_dec_bit v) |>

let mtval_ref = <|
  name = "mtval";
  read_from = (fun s -> s.mtval);
  write_to = (fun v s -> (<| s with mtval = v |>));
  of_regval = (fun v -> vector_64_dec_bit_of_regval v);
  regval_of = (fun v -> regval_of_vector_64_dec_bit v) |>

let mepc_ref = <|
  name = "mepc";
  read_from = (fun s -> s.mepc);
  write_to = (fun v s -> (<| s with mepc = v |>));
  of_regval = (fun v -> vector_64_dec_bit_of_regval v);
  regval_of = (fun v -> regval_of_vector_64_dec_bit v) |>

let mcause_ref = <|
  name = "mcause";
  read_from = (fun s -> s.mcause);
  write_to = (fun v s -> (<| s with mcause = v |>));
  of_regval = (fun v -> Mcause_of_regval v);
  regval_of = (fun v -> regval_of_Mcause v) |>

let mtvec_ref = <|
  name = "mtvec";
  read_from = (fun s -> s.mtvec);
  write_to = (fun v s -> (<| s with mtvec = v |>));
  of_regval = (fun v -> Mtvec_of_regval v);
  regval_of = (fun v -> regval_of_Mtvec v) |>

let medeleg_ref = <|
  name = "medeleg";
  read_from = (fun s -> s.medeleg);
  write_to = (fun v s -> (<| s with medeleg = v |>));
  of_regval = (fun v -> Medeleg_of_regval v);
  regval_of = (fun v -> regval_of_Medeleg v) |>

let mideleg_ref = <|
  name = "mideleg";
  read_from = (fun s -> s.mideleg);
  write_to = (fun v s -> (<| s with mideleg = v |>));
  of_regval = (fun v -> Minterrupts_of_regval v);
  regval_of = (fun v -> regval_of_Minterrupts v) |>

let mie_ref = <|
  name = "mie";
  read_from = (fun s -> s.mie);
  write_to = (fun v s -> (<| s with mie = v |>));
  of_regval = (fun v -> Minterrupts_of_regval v);
  regval_of = (fun v -> regval_of_Minterrupts v) |>

let mip_ref = <|
  name = "mip";
  read_from = (fun s -> s.mip);
  write_to = (fun v s -> (<| s with mip = v |>));
  of_regval = (fun v -> Minterrupts_of_regval v);
  regval_of = (fun v -> regval_of_Minterrupts v) |>

let mstatus_ref = <|
  name = "mstatus";
  read_from = (fun s -> s.mstatus);
  write_to = (fun v s -> (<| s with mstatus = v |>));
  of_regval = (fun v -> Mstatus_of_regval v);
  regval_of = (fun v -> regval_of_Mstatus v) |>

let misa_ref = <|
  name = "misa";
  read_from = (fun s -> s.misa);
  write_to = (fun v s -> (<| s with misa = v |>));
  of_regval = (fun v -> Misa_of_regval v);
  regval_of = (fun v -> regval_of_Misa v) |>

let cur_inst_ref = <|
  name = "cur_inst";
  read_from = (fun s -> s.cur_inst);
  write_to = (fun v s -> (<| s with cur_inst = v |>));
  of_regval = (fun v -> vector_64_dec_bit_of_regval v);
  regval_of = (fun v -> regval_of_vector_64_dec_bit v) |>

let cur_privilege_ref = <|
  name = "cur_privilege";
  read_from = (fun s -> s.cur_privilege);
  write_to = (fun v s -> (<| s with cur_privilege = v |>));
  of_regval = (fun v -> Privilege_of_regval v);
  regval_of = (fun v -> regval_of_Privilege v) |>

let x31_ref = <|
  name = "x31";
  read_from = (fun s -> s.x31);
  write_to = (fun v s -> (<| s with x31 = v |>));
  of_regval = (fun v -> vector_64_dec_bit_of_regval v);
  regval_of = (fun v -> regval_of_vector_64_dec_bit v) |>

let x30_ref = <|
  name = "x30";
  read_from = (fun s -> s.x30);
  write_to = (fun v s -> (<| s with x30 = v |>));
  of_regval = (fun v -> vector_64_dec_bit_of_regval v);
  regval_of = (fun v -> regval_of_vector_64_dec_bit v) |>

let x29_ref = <|
  name = "x29";
  read_from = (fun s -> s.x29);
  write_to = (fun v s -> (<| s with x29 = v |>));
  of_regval = (fun v -> vector_64_dec_bit_of_regval v);
  regval_of = (fun v -> regval_of_vector_64_dec_bit v) |>

let x28_ref = <|
  name = "x28";
  read_from = (fun s -> s.x28);
  write_to = (fun v s -> (<| s with x28 = v |>));
  of_regval = (fun v -> vector_64_dec_bit_of_regval v);
  regval_of = (fun v -> regval_of_vector_64_dec_bit v) |>

let x27_ref = <|
  name = "x27";
  read_from = (fun s -> s.x27);
  write_to = (fun v s -> (<| s with x27 = v |>));
  of_regval = (fun v -> vector_64_dec_bit_of_regval v);
  regval_of = (fun v -> regval_of_vector_64_dec_bit v) |>

let x26_ref = <|
  name = "x26";
  read_from = (fun s -> s.x26);
  write_to = (fun v s -> (<| s with x26 = v |>));
  of_regval = (fun v -> vector_64_dec_bit_of_regval v);
  regval_of = (fun v -> regval_of_vector_64_dec_bit v) |>

let x25_ref = <|
  name = "x25";
  read_from = (fun s -> s.x25);
  write_to = (fun v s -> (<| s with x25 = v |>));
  of_regval = (fun v -> vector_64_dec_bit_of_regval v);
  regval_of = (fun v -> regval_of_vector_64_dec_bit v) |>

let x24_ref = <|
  name = "x24";
  read_from = (fun s -> s.x24);
  write_to = (fun v s -> (<| s with x24 = v |>));
  of_regval = (fun v -> vector_64_dec_bit_of_regval v);
  regval_of = (fun v -> regval_of_vector_64_dec_bit v) |>

let x23_ref = <|
  name = "x23";
  read_from = (fun s -> s.x23);
  write_to = (fun v s -> (<| s with x23 = v |>));
  of_regval = (fun v -> vector_64_dec_bit_of_regval v);
  regval_of = (fun v -> regval_of_vector_64_dec_bit v) |>

let x22_ref = <|
  name = "x22";
  read_from = (fun s -> s.x22);
  write_to = (fun v s -> (<| s with x22 = v |>));
  of_regval = (fun v -> vector_64_dec_bit_of_regval v);
  regval_of = (fun v -> regval_of_vector_64_dec_bit v) |>

let x21_ref = <|
  name = "x21";
  read_from = (fun s -> s.x21);
  write_to = (fun v s -> (<| s with x21 = v |>));
  of_regval = (fun v -> vector_64_dec_bit_of_regval v);
  regval_of = (fun v -> regval_of_vector_64_dec_bit v) |>

let x20_ref = <|
  name = "x20";
  read_from = (fun s -> s.x20);
  write_to = (fun v s -> (<| s with x20 = v |>));
  of_regval = (fun v -> vector_64_dec_bit_of_regval v);
  regval_of = (fun v -> regval_of_vector_64_dec_bit v) |>

let x19_ref = <|
  name = "x19";
  read_from = (fun s -> s.x19);
  write_to = (fun v s -> (<| s with x19 = v |>));
  of_regval = (fun v -> vector_64_dec_bit_of_regval v);
  regval_of = (fun v -> regval_of_vector_64_dec_bit v) |>

let x18_ref = <|
  name = "x18";
  read_from = (fun s -> s.x18);
  write_to = (fun v s -> (<| s with x18 = v |>));
  of_regval = (fun v -> vector_64_dec_bit_of_regval v);
  regval_of = (fun v -> regval_of_vector_64_dec_bit v) |>

let x17_ref = <|
  name = "x17";
  read_from = (fun s -> s.x17);
  write_to = (fun v s -> (<| s with x17 = v |>));
  of_regval = (fun v -> vector_64_dec_bit_of_regval v);
  regval_of = (fun v -> regval_of_vector_64_dec_bit v) |>

let x16_ref = <|
  name = "x16";
  read_from = (fun s -> s.x16);
  write_to = (fun v s -> (<| s with x16 = v |>));
  of_regval = (fun v -> vector_64_dec_bit_of_regval v);
  regval_of = (fun v -> regval_of_vector_64_dec_bit v) |>

let x15_ref = <|
  name = "x15";
  read_from = (fun s -> s.x15);
  write_to = (fun v s -> (<| s with x15 = v |>));
  of_regval = (fun v -> vector_64_dec_bit_of_regval v);
  regval_of = (fun v -> regval_of_vector_64_dec_bit v) |>

let x14_ref = <|
  name = "x14";
  read_from = (fun s -> s.x14);
  write_to = (fun v s -> (<| s with x14 = v |>));
  of_regval = (fun v -> vector_64_dec_bit_of_regval v);
  regval_of = (fun v -> regval_of_vector_64_dec_bit v) |>

let x13_ref = <|
  name = "x13";
  read_from = (fun s -> s.x13);
  write_to = (fun v s -> (<| s with x13 = v |>));
  of_regval = (fun v -> vector_64_dec_bit_of_regval v);
  regval_of = (fun v -> regval_of_vector_64_dec_bit v) |>

let x12_ref = <|
  name = "x12";
  read_from = (fun s -> s.x12);
  write_to = (fun v s -> (<| s with x12 = v |>));
  of_regval = (fun v -> vector_64_dec_bit_of_regval v);
  regval_of = (fun v -> regval_of_vector_64_dec_bit v) |>

let x11_ref = <|
  name = "x11";
  read_from = (fun s -> s.x11);
  write_to = (fun v s -> (<| s with x11 = v |>));
  of_regval = (fun v -> vector_64_dec_bit_of_regval v);
  regval_of = (fun v -> regval_of_vector_64_dec_bit v) |>

let x10_ref = <|
  name = "x10";
  read_from = (fun s -> s.x10);
  write_to = (fun v s -> (<| s with x10 = v |>));
  of_regval = (fun v -> vector_64_dec_bit_of_regval v);
  regval_of = (fun v -> regval_of_vector_64_dec_bit v) |>

let x9_ref = <|
  name = "x9";
  read_from = (fun s -> s.x9);
  write_to = (fun v s -> (<| s with x9 = v |>));
  of_regval = (fun v -> vector_64_dec_bit_of_regval v);
  regval_of = (fun v -> regval_of_vector_64_dec_bit v) |>

let x8_ref = <|
  name = "x8";
  read_from = (fun s -> s.x8);
  write_to = (fun v s -> (<| s with x8 = v |>));
  of_regval = (fun v -> vector_64_dec_bit_of_regval v);
  regval_of = (fun v -> regval_of_vector_64_dec_bit v) |>

let x7_ref = <|
  name = "x7";
  read_from = (fun s -> s.x7);
  write_to = (fun v s -> (<| s with x7 = v |>));
  of_regval = (fun v -> vector_64_dec_bit_of_regval v);
  regval_of = (fun v -> regval_of_vector_64_dec_bit v) |>

let x6_ref = <|
  name = "x6";
  read_from = (fun s -> s.x6);
  write_to = (fun v s -> (<| s with x6 = v |>));
  of_regval = (fun v -> vector_64_dec_bit_of_regval v);
  regval_of = (fun v -> regval_of_vector_64_dec_bit v) |>

let x5_ref = <|
  name = "x5";
  read_from = (fun s -> s.x5);
  write_to = (fun v s -> (<| s with x5 = v |>));
  of_regval = (fun v -> vector_64_dec_bit_of_regval v);
  regval_of = (fun v -> regval_of_vector_64_dec_bit v) |>

let x4_ref = <|
  name = "x4";
  read_from = (fun s -> s.x4);
  write_to = (fun v s -> (<| s with x4 = v |>));
  of_regval = (fun v -> vector_64_dec_bit_of_regval v);
  regval_of = (fun v -> regval_of_vector_64_dec_bit v) |>

let x3_ref = <|
  name = "x3";
  read_from = (fun s -> s.x3);
  write_to = (fun v s -> (<| s with x3 = v |>));
  of_regval = (fun v -> vector_64_dec_bit_of_regval v);
  regval_of = (fun v -> regval_of_vector_64_dec_bit v) |>

let x2_ref = <|
  name = "x2";
  read_from = (fun s -> s.x2);
  write_to = (fun v s -> (<| s with x2 = v |>));
  of_regval = (fun v -> vector_64_dec_bit_of_regval v);
  regval_of = (fun v -> regval_of_vector_64_dec_bit v) |>

let x1_ref = <|
  name = "x1";
  read_from = (fun s -> s.x1);
  write_to = (fun v s -> (<| s with x1 = v |>));
  of_regval = (fun v -> vector_64_dec_bit_of_regval v);
  regval_of = (fun v -> regval_of_vector_64_dec_bit v) |>

let Xs_ref = <|
  name = "Xs";
  read_from = (fun s -> s.Xs);
  write_to = (fun v s -> (<| s with Xs = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> vector_64_dec_bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_vector_64_dec_bit v) 32 false v) |>

let nextPC_ref = <|
  name = "nextPC";
  read_from = (fun s -> s.nextPC);
  write_to = (fun v s -> (<| s with nextPC = v |>));
  of_regval = (fun v -> vector_64_dec_bit_of_regval v);
  regval_of = (fun v -> regval_of_vector_64_dec_bit v) |>

let PC_ref = <|
  name = "PC";
  read_from = (fun s -> s.PC);
  write_to = (fun v s -> (<| s with PC = v |>));
  of_regval = (fun v -> vector_64_dec_bit_of_regval v);
  regval_of = (fun v -> regval_of_vector_64_dec_bit v) |>

val get_regval : string -> regstate -> maybe register_value
let get_regval reg_name s =
  if reg_name = "tlb39" then Just (tlb39_ref.regval_of (tlb39_ref.read_from s)) else
  if reg_name = "htif_exit_code" then Just (htif_exit_code_ref.regval_of (htif_exit_code_ref.read_from s)) else
  if reg_name = "htif_done" then Just (htif_done_ref.regval_of (htif_done_ref.read_from s)) else
  if reg_name = "htif_tohost" then Just (htif_tohost_ref.regval_of (htif_tohost_ref.read_from s)) else
  if reg_name = "mtimecmp" then Just (mtimecmp_ref.regval_of (mtimecmp_ref.read_from s)) else
  if reg_name = "tselect" then Just (tselect_ref.regval_of (tselect_ref.read_from s)) else
  if reg_name = "stval" then Just (stval_ref.regval_of (stval_ref.read_from s)) else
  if reg_name = "scause" then Just (scause_ref.regval_of (scause_ref.read_from s)) else
  if reg_name = "sepc" then Just (sepc_ref.regval_of (sepc_ref.read_from s)) else
  if reg_name = "sscratch" then Just (sscratch_ref.regval_of (sscratch_ref.read_from s)) else
  if reg_name = "stvec" then Just (stvec_ref.regval_of (stvec_ref.read_from s)) else
  if reg_name = "satp" then Just (satp_ref.regval_of (satp_ref.read_from s)) else
  if reg_name = "sideleg" then Just (sideleg_ref.regval_of (sideleg_ref.read_from s)) else
  if reg_name = "sedeleg" then Just (sedeleg_ref.regval_of (sedeleg_ref.read_from s)) else
  if reg_name = "pmpcfg0" then Just (pmpcfg0_ref.regval_of (pmpcfg0_ref.read_from s)) else
  if reg_name = "pmpaddr0" then Just (pmpaddr0_ref.regval_of (pmpaddr0_ref.read_from s)) else
  if reg_name = "mhartid" then Just (mhartid_ref.regval_of (mhartid_ref.read_from s)) else
  if reg_name = "marchid" then Just (marchid_ref.regval_of (marchid_ref.read_from s)) else
  if reg_name = "mimpid" then Just (mimpid_ref.regval_of (mimpid_ref.read_from s)) else
  if reg_name = "mvendorid" then Just (mvendorid_ref.regval_of (mvendorid_ref.read_from s)) else
  if reg_name = "minstret_written" then Just (minstret_written_ref.regval_of (minstret_written_ref.read_from s)) else
  if reg_name = "minstret" then Just (minstret_ref.regval_of (minstret_ref.read_from s)) else
  if reg_name = "mtime" then Just (mtime_ref.regval_of (mtime_ref.read_from s)) else
  if reg_name = "mcycle" then Just (mcycle_ref.regval_of (mcycle_ref.read_from s)) else
  if reg_name = "scounteren" then Just (scounteren_ref.regval_of (scounteren_ref.read_from s)) else
  if reg_name = "mcounteren" then Just (mcounteren_ref.regval_of (mcounteren_ref.read_from s)) else
  if reg_name = "mscratch" then Just (mscratch_ref.regval_of (mscratch_ref.read_from s)) else
  if reg_name = "mtval" then Just (mtval_ref.regval_of (mtval_ref.read_from s)) else
  if reg_name = "mepc" then Just (mepc_ref.regval_of (mepc_ref.read_from s)) else
  if reg_name = "mcause" then Just (mcause_ref.regval_of (mcause_ref.read_from s)) else
  if reg_name = "mtvec" then Just (mtvec_ref.regval_of (mtvec_ref.read_from s)) else
  if reg_name = "medeleg" then Just (medeleg_ref.regval_of (medeleg_ref.read_from s)) else
  if reg_name = "mideleg" then Just (mideleg_ref.regval_of (mideleg_ref.read_from s)) else
  if reg_name = "mie" then Just (mie_ref.regval_of (mie_ref.read_from s)) else
  if reg_name = "mip" then Just (mip_ref.regval_of (mip_ref.read_from s)) else
  if reg_name = "mstatus" then Just (mstatus_ref.regval_of (mstatus_ref.read_from s)) else
  if reg_name = "misa" then Just (misa_ref.regval_of (misa_ref.read_from s)) else
  if reg_name = "cur_inst" then Just (cur_inst_ref.regval_of (cur_inst_ref.read_from s)) else
  if reg_name = "cur_privilege" then Just (cur_privilege_ref.regval_of (cur_privilege_ref.read_from s)) else
  if reg_name = "x31" then Just (x31_ref.regval_of (x31_ref.read_from s)) else
  if reg_name = "x30" then Just (x30_ref.regval_of (x30_ref.read_from s)) else
  if reg_name = "x29" then Just (x29_ref.regval_of (x29_ref.read_from s)) else
  if reg_name = "x28" then Just (x28_ref.regval_of (x28_ref.read_from s)) else
  if reg_name = "x27" then Just (x27_ref.regval_of (x27_ref.read_from s)) else
  if reg_name = "x26" then Just (x26_ref.regval_of (x26_ref.read_from s)) else
  if reg_name = "x25" then Just (x25_ref.regval_of (x25_ref.read_from s)) else
  if reg_name = "x24" then Just (x24_ref.regval_of (x24_ref.read_from s)) else
  if reg_name = "x23" then Just (x23_ref.regval_of (x23_ref.read_from s)) else
  if reg_name = "x22" then Just (x22_ref.regval_of (x22_ref.read_from s)) else
  if reg_name = "x21" then Just (x21_ref.regval_of (x21_ref.read_from s)) else
  if reg_name = "x20" then Just (x20_ref.regval_of (x20_ref.read_from s)) else
  if reg_name = "x19" then Just (x19_ref.regval_of (x19_ref.read_from s)) else
  if reg_name = "x18" then Just (x18_ref.regval_of (x18_ref.read_from s)) else
  if reg_name = "x17" then Just (x17_ref.regval_of (x17_ref.read_from s)) else
  if reg_name = "x16" then Just (x16_ref.regval_of (x16_ref.read_from s)) else
  if reg_name = "x15" then Just (x15_ref.regval_of (x15_ref.read_from s)) else
  if reg_name = "x14" then Just (x14_ref.regval_of (x14_ref.read_from s)) else
  if reg_name = "x13" then Just (x13_ref.regval_of (x13_ref.read_from s)) else
  if reg_name = "x12" then Just (x12_ref.regval_of (x12_ref.read_from s)) else
  if reg_name = "x11" then Just (x11_ref.regval_of (x11_ref.read_from s)) else
  if reg_name = "x10" then Just (x10_ref.regval_of (x10_ref.read_from s)) else
  if reg_name = "x9" then Just (x9_ref.regval_of (x9_ref.read_from s)) else
  if reg_name = "x8" then Just (x8_ref.regval_of (x8_ref.read_from s)) else
  if reg_name = "x7" then Just (x7_ref.regval_of (x7_ref.read_from s)) else
  if reg_name = "x6" then Just (x6_ref.regval_of (x6_ref.read_from s)) else
  if reg_name = "x5" then Just (x5_ref.regval_of (x5_ref.read_from s)) else
  if reg_name = "x4" then Just (x4_ref.regval_of (x4_ref.read_from s)) else
  if reg_name = "x3" then Just (x3_ref.regval_of (x3_ref.read_from s)) else
  if reg_name = "x2" then Just (x2_ref.regval_of (x2_ref.read_from s)) else
  if reg_name = "x1" then Just (x1_ref.regval_of (x1_ref.read_from s)) else
  if reg_name = "Xs" then Just (Xs_ref.regval_of (Xs_ref.read_from s)) else
  if reg_name = "nextPC" then Just (nextPC_ref.regval_of (nextPC_ref.read_from s)) else
  if reg_name = "PC" then Just (PC_ref.regval_of (PC_ref.read_from s)) else
  Nothing

val set_regval : string -> register_value -> regstate -> maybe regstate
let set_regval reg_name v s =
  if reg_name = "tlb39" then Maybe.map (fun v -> tlb39_ref.write_to v s) (tlb39_ref.of_regval v) else
  if reg_name = "htif_exit_code" then Maybe.map (fun v -> htif_exit_code_ref.write_to v s) (htif_exit_code_ref.of_regval v) else
  if reg_name = "htif_done" then Maybe.map (fun v -> htif_done_ref.write_to v s) (htif_done_ref.of_regval v) else
  if reg_name = "htif_tohost" then Maybe.map (fun v -> htif_tohost_ref.write_to v s) (htif_tohost_ref.of_regval v) else
  if reg_name = "mtimecmp" then Maybe.map (fun v -> mtimecmp_ref.write_to v s) (mtimecmp_ref.of_regval v) else
  if reg_name = "tselect" then Maybe.map (fun v -> tselect_ref.write_to v s) (tselect_ref.of_regval v) else
  if reg_name = "stval" then Maybe.map (fun v -> stval_ref.write_to v s) (stval_ref.of_regval v) else
  if reg_name = "scause" then Maybe.map (fun v -> scause_ref.write_to v s) (scause_ref.of_regval v) else
  if reg_name = "sepc" then Maybe.map (fun v -> sepc_ref.write_to v s) (sepc_ref.of_regval v) else
  if reg_name = "sscratch" then Maybe.map (fun v -> sscratch_ref.write_to v s) (sscratch_ref.of_regval v) else
  if reg_name = "stvec" then Maybe.map (fun v -> stvec_ref.write_to v s) (stvec_ref.of_regval v) else
  if reg_name = "satp" then Maybe.map (fun v -> satp_ref.write_to v s) (satp_ref.of_regval v) else
  if reg_name = "sideleg" then Maybe.map (fun v -> sideleg_ref.write_to v s) (sideleg_ref.of_regval v) else
  if reg_name = "sedeleg" then Maybe.map (fun v -> sedeleg_ref.write_to v s) (sedeleg_ref.of_regval v) else
  if reg_name = "pmpcfg0" then Maybe.map (fun v -> pmpcfg0_ref.write_to v s) (pmpcfg0_ref.of_regval v) else
  if reg_name = "pmpaddr0" then Maybe.map (fun v -> pmpaddr0_ref.write_to v s) (pmpaddr0_ref.of_regval v) else
  if reg_name = "mhartid" then Maybe.map (fun v -> mhartid_ref.write_to v s) (mhartid_ref.of_regval v) else
  if reg_name = "marchid" then Maybe.map (fun v -> marchid_ref.write_to v s) (marchid_ref.of_regval v) else
  if reg_name = "mimpid" then Maybe.map (fun v -> mimpid_ref.write_to v s) (mimpid_ref.of_regval v) else
  if reg_name = "mvendorid" then Maybe.map (fun v -> mvendorid_ref.write_to v s) (mvendorid_ref.of_regval v) else
  if reg_name = "minstret_written" then Maybe.map (fun v -> minstret_written_ref.write_to v s) (minstret_written_ref.of_regval v) else
  if reg_name = "minstret" then Maybe.map (fun v -> minstret_ref.write_to v s) (minstret_ref.of_regval v) else
  if reg_name = "mtime" then Maybe.map (fun v -> mtime_ref.write_to v s) (mtime_ref.of_regval v) else
  if reg_name = "mcycle" then Maybe.map (fun v -> mcycle_ref.write_to v s) (mcycle_ref.of_regval v) else
  if reg_name = "scounteren" then Maybe.map (fun v -> scounteren_ref.write_to v s) (scounteren_ref.of_regval v) else
  if reg_name = "mcounteren" then Maybe.map (fun v -> mcounteren_ref.write_to v s) (mcounteren_ref.of_regval v) else
  if reg_name = "mscratch" then Maybe.map (fun v -> mscratch_ref.write_to v s) (mscratch_ref.of_regval v) else
  if reg_name = "mtval" then Maybe.map (fun v -> mtval_ref.write_to v s) (mtval_ref.of_regval v) else
  if reg_name = "mepc" then Maybe.map (fun v -> mepc_ref.write_to v s) (mepc_ref.of_regval v) else
  if reg_name = "mcause" then Maybe.map (fun v -> mcause_ref.write_to v s) (mcause_ref.of_regval v) else
  if reg_name = "mtvec" then Maybe.map (fun v -> mtvec_ref.write_to v s) (mtvec_ref.of_regval v) else
  if reg_name = "medeleg" then Maybe.map (fun v -> medeleg_ref.write_to v s) (medeleg_ref.of_regval v) else
  if reg_name = "mideleg" then Maybe.map (fun v -> mideleg_ref.write_to v s) (mideleg_ref.of_regval v) else
  if reg_name = "mie" then Maybe.map (fun v -> mie_ref.write_to v s) (mie_ref.of_regval v) else
  if reg_name = "mip" then Maybe.map (fun v -> mip_ref.write_to v s) (mip_ref.of_regval v) else
  if reg_name = "mstatus" then Maybe.map (fun v -> mstatus_ref.write_to v s) (mstatus_ref.of_regval v) else
  if reg_name = "misa" then Maybe.map (fun v -> misa_ref.write_to v s) (misa_ref.of_regval v) else
  if reg_name = "cur_inst" then Maybe.map (fun v -> cur_inst_ref.write_to v s) (cur_inst_ref.of_regval v) else
  if reg_name = "cur_privilege" then Maybe.map (fun v -> cur_privilege_ref.write_to v s) (cur_privilege_ref.of_regval v) else
  if reg_name = "x31" then Maybe.map (fun v -> x31_ref.write_to v s) (x31_ref.of_regval v) else
  if reg_name = "x30" then Maybe.map (fun v -> x30_ref.write_to v s) (x30_ref.of_regval v) else
  if reg_name = "x29" then Maybe.map (fun v -> x29_ref.write_to v s) (x29_ref.of_regval v) else
  if reg_name = "x28" then Maybe.map (fun v -> x28_ref.write_to v s) (x28_ref.of_regval v) else
  if reg_name = "x27" then Maybe.map (fun v -> x27_ref.write_to v s) (x27_ref.of_regval v) else
  if reg_name = "x26" then Maybe.map (fun v -> x26_ref.write_to v s) (x26_ref.of_regval v) else
  if reg_name = "x25" then Maybe.map (fun v -> x25_ref.write_to v s) (x25_ref.of_regval v) else
  if reg_name = "x24" then Maybe.map (fun v -> x24_ref.write_to v s) (x24_ref.of_regval v) else
  if reg_name = "x23" then Maybe.map (fun v -> x23_ref.write_to v s) (x23_ref.of_regval v) else
  if reg_name = "x22" then Maybe.map (fun v -> x22_ref.write_to v s) (x22_ref.of_regval v) else
  if reg_name = "x21" then Maybe.map (fun v -> x21_ref.write_to v s) (x21_ref.of_regval v) else
  if reg_name = "x20" then Maybe.map (fun v -> x20_ref.write_to v s) (x20_ref.of_regval v) else
  if reg_name = "x19" then Maybe.map (fun v -> x19_ref.write_to v s) (x19_ref.of_regval v) else
  if reg_name = "x18" then Maybe.map (fun v -> x18_ref.write_to v s) (x18_ref.of_regval v) else
  if reg_name = "x17" then Maybe.map (fun v -> x17_ref.write_to v s) (x17_ref.of_regval v) else
  if reg_name = "x16" then Maybe.map (fun v -> x16_ref.write_to v s) (x16_ref.of_regval v) else
  if reg_name = "x15" then Maybe.map (fun v -> x15_ref.write_to v s) (x15_ref.of_regval v) else
  if reg_name = "x14" then Maybe.map (fun v -> x14_ref.write_to v s) (x14_ref.of_regval v) else
  if reg_name = "x13" then Maybe.map (fun v -> x13_ref.write_to v s) (x13_ref.of_regval v) else
  if reg_name = "x12" then Maybe.map (fun v -> x12_ref.write_to v s) (x12_ref.of_regval v) else
  if reg_name = "x11" then Maybe.map (fun v -> x11_ref.write_to v s) (x11_ref.of_regval v) else
  if reg_name = "x10" then Maybe.map (fun v -> x10_ref.write_to v s) (x10_ref.of_regval v) else
  if reg_name = "x9" then Maybe.map (fun v -> x9_ref.write_to v s) (x9_ref.of_regval v) else
  if reg_name = "x8" then Maybe.map (fun v -> x8_ref.write_to v s) (x8_ref.of_regval v) else
  if reg_name = "x7" then Maybe.map (fun v -> x7_ref.write_to v s) (x7_ref.of_regval v) else
  if reg_name = "x6" then Maybe.map (fun v -> x6_ref.write_to v s) (x6_ref.of_regval v) else
  if reg_name = "x5" then Maybe.map (fun v -> x5_ref.write_to v s) (x5_ref.of_regval v) else
  if reg_name = "x4" then Maybe.map (fun v -> x4_ref.write_to v s) (x4_ref.of_regval v) else
  if reg_name = "x3" then Maybe.map (fun v -> x3_ref.write_to v s) (x3_ref.of_regval v) else
  if reg_name = "x2" then Maybe.map (fun v -> x2_ref.write_to v s) (x2_ref.of_regval v) else
  if reg_name = "x1" then Maybe.map (fun v -> x1_ref.write_to v s) (x1_ref.of_regval v) else
  if reg_name = "Xs" then Maybe.map (fun v -> Xs_ref.write_to v s) (Xs_ref.of_regval v) else
  if reg_name = "nextPC" then Maybe.map (fun v -> nextPC_ref.write_to v s) (nextPC_ref.of_regval v) else
  if reg_name = "PC" then Maybe.map (fun v -> PC_ref.write_to v s) (PC_ref.of_regval v) else
  Nothing

let register_accessors = (get_regval, set_regval)


type MR 'a 'r = base_monadR register_value regstate 'a 'r exception
type M 'a = base_monad register_value regstate 'a exception
